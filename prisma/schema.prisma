// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  isAdmin       Boolean   @default(false)
  year          String?
  branch        String?
  regNumber     String?
  bio           String?
  reputation    Int       @default(0)
  badges        String?   // JSON string of badges
  status        String    @default("active")  // active, warned, suspended
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  comments      Comment[]
  votes         Vote[]
  reports       Report[]
  notifications Notification[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

enum PostCategory {
  ACADEMIC
  NON_ACADEMIC
}

model Post {
  id          String       @id @default(cuid())
  userId      String
  category    PostCategory
  title       String
  description String
  subject     String?      // For academic posts
  tags        String       // JSON string of tags
  attachment  String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments Comment[]
  votes    Vote[]
  reports  Report[]

  @@index([category])
  @@index([userId])
  @@index([createdAt])
  @@map("posts")
}

model Comment {
  id              String   @id @default(cuid())
  postId          String
  userId          String
  parentCommentId String?
  content         String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  post            Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  parentComment   Comment?  @relation("CommentReplies", fields: [parentCommentId], references: [id], onDelete: Cascade)
  replies         Comment[] @relation("CommentReplies")
  votes           Vote[]
  reports         Report[]

  @@index([postId])
  @@index([userId])
  @@index([parentCommentId])
  @@map("comments")
}

model Vote {
  id        String   @id @default(cuid())
  userId    String
  postId    String?
  commentId String?
  value     Int      // +1 or -1
  createdAt DateTime @default(now())

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post    Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@unique([userId, commentId])
  @@index([postId])
  @@index([commentId])
  @@map("votes")
}

enum ReportReason {
  SPAM
  INAPPROPRIATE
  HARASSMENT
  MISINFORMATION
  OTHER
}

model Report {
  id        String       @id @default(cuid())
  userId    String
  postId    String?
  commentId String?
  reason    String       // Reason as text
  details   String?
  status    String       @default("pending") // pending, reviewed, resolved
  priority  String       @default("medium")  // low, medium, high
  resolved  Boolean      @default(false)
  createdAt DateTime     @default(now())

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post    Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([resolved])
  @@index([status])
  @@map("reports")
}

model Notification {
  id        String   @id @default(cuid())
  type      String   // "post_deleted", "comment", "upvote", etc.
  title     String
  message   String
  postTitle String?  // Title of the deleted post
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  userId    String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, read])
  @@index([createdAt])
  @@map("notifications")
}
